else if (remove.unclass == TRUE) {
to.plot <- binary.summary[binary.summary[, "Cell.Type"] !=
"Unclassified", ]
}
rownames(to.plot) <- to.plot[, "Cell.Type"]
to.plot <- subset(to.plot, select = -c(Cell.Type, Frequency,
Percentage))
hm_pal = rev(brewer.pal(11, "RdYlBu"))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
col = colorRamp2(
seq(min(to.plot), max(to.plot), l = n <- 100),
colorRampPalette(hm_pal)(n)))
grid.newpage()
plot <- grid.draw(medians.heatmap$gtable)
return(plot)
}
plotBHeatmap(binary.summary)
col = colorRamp2(
seq(min(to.plot), max(to.plot), l = n <- 100),
colorRampPalette(hm_pal)(n))
col
col= colorRamp2(
seq(min(to.plot), max(to.plot), l = n <- 100),
colorRampPalette(hm_pal)(n))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = col)
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = colorRampPalette()(100, rev(hm_pal)))
colorRampPalette()(100, rev(hm_pal))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = colorRampPalette(hmpal)(100))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = colorRampPalette(hm_pal)(100))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = col)
col
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = hm_pal)
colorRampPalette(hm_pal)
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = colorRampPalette(hm_pal))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(to.plot, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(to.plot, color = colorRampPalette(hm_pal)(50))
pheatmap(to.plot, color = colorRampPalette(hm_pal)(100))
pheatmap(to.plot, color = colorRampPalette(hm_pal)(100))
pheatmap(to.plot, color = colorRampPalette(hm_pal)(100))
pheatmap(to.plot, color = colorRampPalette(hm_pal)(100))
pheatmap(to.plot, color = colorRampPalette(hm_pal)(80))
c("navy", "white", "firebrick3")
pheatmap(to.plot, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
displayMarker(sce,types)
pheatmap(to.plot, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
plot <- grid.draw(medians.heatmap$gtable)
pheatmap(to.plot, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
library(BinaryClust)
pheatmap(to.plot, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
to.plot <- binary.summary[binary.summary[, "Cell.Type"] !=
"Unclassified", ]
rownames(to.plot) <- to.plot[, "Cell.Type"]
to.plot <- subset(to.plot, select = -c(Cell.Type, Frequency,
Percentage))
hm_pal = rev(brewer.pal(11, "RdYlBu"))
col= colorRamp2(
seq(min(to.plot), max(to.plot), l = n <- 100),
colorRampPalette(hm_pal)(n))
medians.heatmap <- pheatmap(to.plot, cluster_rows = T,
cluster_cols = F, cellwidth = 10, cellheight = 15,
scale='none',
border_color="white",
main=title,
color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
pheatmap(to.plot, color = colorRampPalette(c("navy", "white", "firebrick3"))(50))
displayMarker(sce,types)
####functions
#1. Chosen markers intensity display
#???????????????????add color_by????????????????????????/
displayMarker <- function(sce,type,color_by='sample_id',n=3){
if(is(sce,'SingleCellExperiment')){
m <- colnames(type)[colnames(type)!='Cell Type']
if(!all(m %in% rowData(sce)$marker_name)){
message('Please check types file to make sure all markers listed are in the panel')
} else{
df.in<- data.frame(t(assay(sce))[,m], colData(sce), check.names = FALSE)
gg_df <- melt(df.in,
variable.name = "antigen",
id.vars = names(colData(sce)))
p<-ggplot(gg_df, fill = NULL,
aes_string(
x = 'value', y = "after_stat(ndensity)",
col = color_by, group = "sample_id"))+
facet_wrap(~ antigen, scales = "free_x") +
geom_density() +
ylab("normalized density")+
theme_classic() + theme(
panel.grid = element_blank(),
strip.background = element_blank(),
strip.text = element_text(face = "bold"),
axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"))}
p$facet$params$ncol <- n
return(p)
} else{
message('Input data is ', class(sce),', please input sce data')
}
}
displayMarker(sce,types)
library(CATALYST)
displayMarker(sce,types)
library(CATALYST)
library(readxl)
library(flowCore)
library(SingleCellExperiment)
library(dplyr)
library(cowplot)
library(ggplot2)
library(BinaryClust)
library(Rphenograph)
library(reshape2)
x<-(1,2,4)
x<-c(1,2,4)
y<-c(3,4,5)
plot(x,y)
dfe <- data.frame(
BMI = c(18, 19, 21, 17),
name = c("Alice", "Bob", "Charlie", "Dave"),
age = c(25, 32, 47, 18),
gender = c("F", "M", "M", "M")
)
library(ggplot)
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot() + facet_wrap(.~cluster_id,scales="free")+
labs(y='Cell proportion(%)')+
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
panel.border = element_rect(colour = "black", fill=NA,size = 1),
strip.background = element_rect(size = 1)
)+theme_bw()+ggtitle(title)
library(ggplot2)
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot() + facet_wrap(.~cluster_id,scales="free")+
labs(y='Cell proportion(%)')+
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
panel.border = element_rect(colour = "black", fill=NA,size = 1),
strip.background = element_rect(size = 1)
)+theme_bw()+ggtitle(title)
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot() +
labs(y='Cell proportion(%)')+
theme(axis.title.x = element_blank(),
axis.text.x = element_blank(),
panel.border = element_rect(colour = "black", fill=NA,size = 1),
strip.background = element_rect(size = 1)
)+theme_bw()+ggtitle(title)
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot()
dfe <- data.frame(
BMI = c(18, 19, 21, 17),
name = c("Alice", "Bob", "Charlie", "Dave"),
age = c(25, 32, 47, 18),
gender = c("F", "F", "M", "M")
)
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot()
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot()+theme_bw
ggplot(dfe,aes(x=gender,y=BMI, color=gender))+
geom_boxplot()+theme_bw()
test<-function(df,a){
ggplot(df,aes(x=gender,y=BMI, color=gender))+
geom_boxplot()+theme_bw()
}
test(df)
test<-function(df){
ggplot(df,aes(x=gender,y=BMI, color=gender))+
geom_boxplot()+theme_bw()
}
test(df)
test(dfe)
test<-function(df,a){
ggplot(df,aes(x=a,y=BMI, color=a))+
geom_boxplot()+theme_bw()
}
test(dfe,gender)
test<-function(df,a){
print(a)
ggplot(df,aes(x=a,y=BMI, color=a))+
geom_boxplot()+theme_bw()
}
test(dfe,gender)
test<-function(df,a){
a<-gender
ggplot(df,aes(x=a,y=BMI, color=a))+
geom_boxplot()+theme_bw()
}
test(dfe,gender)
test(dfe,a=gender)
test(dfe,a=gender)
print(a)}
test(dfe,a=gender)
test(dfe,a='gender')
print(a)}
test(dfe,a='gender')
test(dfe,a='gender')
test<-function(df,a){
ggplot(df,aes(x=a,y=BMI, color=a))+
geom_boxplot()+theme_bw()
}
test(dfe,a='gender')
test(dfe,a=gender)
plot_bmi <- function(df, gender) {
ggplot(df, aes(x = gender, y = BMI, color = gender)) +
geom_boxplot() +
theme_bw()
}
plot_bmi(dfe,gender)
plot_bmi(dfe,age)
plot_bmi(dfe,age)
plot_bmi(dfe,gender=age)
ggplot(dfe, aes(x = age, y = BMI, color = age)) +
geom_boxplot() +
theme_bw()
ggplot(dfe, aes(x = name, y = BMI, color = name)) +
geom_boxplot() +
theme_bw()
plot_bmi(dfe,gender=name)
plot_bmi <- function(df, gender) {
ggplot(df, aes_string(x = gender, y = BMI, color = gender)) +
geom_boxplot() +
theme_bw()
}
plot_bmi(dfe,gender=name)
plot_bmi(dfe,gender)
plot_bmi(dfe,'gender')
plot_bmi <- function(df, gender) {
ggplot(df, aes_string(x = gender, y = 'BMI', color = gender)) +
geom_boxplot() +
theme_bw()
}
plot_bmi(dfe,'gender')
plot_bmi(dfe,'name')
getwd()
output_dir="CytofRUV_output"
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
wd_data=file.path(getwd(),output_dir)
write.FCS(x=CytofRUV::A1,filename =file.path(wd_data,"A1.fcs"))
write.FCS(x=CytofRUV::A2,filename = file.path(wd_data,"A2.fcs"))
write.FCS(x=CytofRUV::Run3_A1,filename = file.path(wd_data,"Run3_A1.fcs"))
library(CytofRUV)
write.FCS(x=CytofRUV::A1,filename =file.path(wd_data,"A1.fcs"))
library(CATALYST)
library(flowCore)
wd_data
write.FCS(x=CytofRUV::A1,filename =file.path(wd_data,"A1.fcs"))
write.FCS(x=CytofRUV::A2,filename = file.path(wd_data,"A2.fcs"))
write.FCS(x=CytofRUV::Run3_A1,filename = file.path(wd_data,"Run3_A1.fcs"))
write.FCS(x=CytofRUV::Run3_A2,filename = file.path(wd_data,"Run3_A2.fcs"))
write_xlsx(x=CytofRUV::md,path = file.path(wd_data,"Metadata.xlsx"))
library(readxl)
write_xlsx(x=CytofRUV::md,path = file.path(wd_data,"Metadata.xlsx"))
write_xlsx(x=CytofRUV::panel,path = file.path(wd_data,"Panel.xlsx"))
??write_xlsx
library(writexl)
write_xlsx(x=CytofRUV::md,path = file.path(wd_data,"Metadata.xlsx"))
write_xlsx(x=CytofRUV::panel,path = file.path(wd_data,"Panel.xlsx"))
metadata_filename="Metadata.xlsx"
panel_filename="Panel.xlsx"
seed=1234
clusters_nb=20
## Loading the data
data=load_data(wd_data,metadata_filename,panel_filename)
View(data)
## Cluster the data
data$daf=cluster_data(data$daf,seed,markers_to_use=data$lineage_markers,clusters_nb)
## CytofRUV normalisation procedure
dir_name_norm_data="CytofRUV_Norm_data_HC2_all_cl_20"
data$daf$sample_id
cluster=cluster_ids(data$daf,"meta20")
cluster_ids(data$daf,"meta20")
t(SummarizedExperiment::assay(data$daf,"exprs")
）
t(SummarizedExperiment::assay(data$daf,"exprs"))
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
rep_samples=list(c("HC2_B1","HC2_B2"))
list(seq(1,20))
cluster_list_rep_samples <- list(seq(1,20))
k_value <- 5
seed=1234
dir_name_norm_data="CytofRUV_Norm_data_HC2_all_cl_20"
raw_data <- data.frame(sample = data$daf$sample_id, cluster=cluster_ids(data$daf,"meta20"), )t(SummarizedExperiment::assay(data$daf,"exprs"))
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
## CytofRUV normalisation procedure
dir_name_norm_data="CytofRUV_Norm_data_HC2_all_cl_20"
raw_data <- data.frame(sample = data$daf$sample_id, cluster=cluster_ids(data$daf,"meta20"), t(SummarizedExperiment::assay(data$daf,"exprs")))
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
rep_samples=list(c("HC2_B1","HC2_B2"))
cluster_list_rep_samples <- list(seq(1,20))
k_value <- 5
seed=1234
normalise_data(data=data,raw_data=raw_data,rep_samples=rep_samples, norm_clusters=cluster_list_rep_samples, k=k_value, num_clusters=clusters_nb,wd_data=wd_data,dir_norm_data=dir_name_norm_data)
fcs_dir <- 'fcs'
metadata_dir <- 'fcs/metadata.xlsx'
panel_dir <- "fcs/panel_metadata.xlsx"
md <- read_excel(metadata_dir)
panel <- read_excel(panel_dir)
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('batch','condition','patient_id')), features = panel$fcs_colname)
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
fcs_files
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/")
fcs_dir <- 'fcs'
metadata_dir <- 'fcs/metadata.xlsx'
panel_dir <- "fcs/panel_metadata.xlsx"
md <- read_excel(metadata_dir)
panel <- read_excel(panel_dir)
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
panel <- read_excel(panel_dir)
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
md
panel
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('batch','condition','patient_id')), features = panel$fcs_colname)
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('batch','condition','patient_id')), features = panel$fcs_colname)
panel_dir <- "fcs/panel_metadata2.xlsx"
panel <- read_excel(panel_dir)
panel
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('batch','condition','patient_id')), features = panel$fcs_colname)
sce <- cluster(sce, features = type_markers(sce),
xdim = 10, ydim = 10, maxK = 40, seed = 1234)
sce$sample_id
data$daf$sample_id
cluster_ids(data$daf,"meta20")
sce$cluster_id
t(SummarizedExperiment::assay(data$daf,"exprs"))
t(assay(sce,'exprs'))
raw_data <- data.frame(sample = sce$sample_id, cluster=sce$cluster_id, t(assay(sce,'exprs')))
raw_data
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
raw_data
colData(sce)
md
metadata_dir <- 'fcs/metadata2.xlsx'
md <- read_excel(metadata_dir)
md
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('batch','condition','patient_id')), features = panel$fcs_colname)
sce <- cluster(sce, features = type_markers(sce),
xdim = 10, ydim = 10, maxK = 20, seed = 1234)
dir_name_norm_data="CytofRUV_Norm"
raw_data <- data.frame(sample = sce$sample_id, cluster=sce$cluster_id, t(assay(sce,'exprs')))
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
md
rep_samples
filter(md,condition=='Ref')
filter(md,condition=='Ref')
library(dplyr)
filter(md,condition=='Ref')
filter(md,condition=='Ref')$sample_id
rep_samples=list(filter(md,condition=='Ref')$sample_id)
rep_samples
cluster_list_rep_samples <- list(seq(1,20))
k_value <- 5
seed=1234
data
wd_data
clusters_nb
normalise_data(data=sce,raw_data=raw_data,rep_samples=rep_samples, norm_clusters=cluster_list_rep_samples, k=k_value, num_clusters=clusters_nb,wd_data=wd_data,dir_norm_data=dir_name_norm_data)
dir_name_norm_data="CytofRUV_Norm"
wd_data
output_dir="CytofRUV_output2"
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
wd_data=file.path(getwd(),output_dir)
wd_data
getwd()
wd_data=file.path(getwd(),'fcs')
wd_data
metadata_filename="metadata2.xlsx"
panel_filename="panel_metadata2.xlsx"
seed=1234
clusters_nb=20
## Loading the data
data=load_data(wd_data,metadata_filename,panel_filename)
## Cluster the data
data$daf=cluster_data(data$daf,seed,markers_to_use=data$lineage_markers,clusters_nb)
dir_name_norm_data="CytofRUV_Norm"
raw_data <- data.frame(sample = data$daf$sample_id, cluster=cluster_ids(data$daf,"meta20"), t(SummarizedExperiment::assay(data$daf,"exprs")))
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
rep_samples=list(filter(md,condition=='Ref')$sample_id)
rep_samples
cluster_list_rep_samples <- list(seq(1,20))
k_value <- 5
seed=1234
normalise_data(data=data,raw_data=raw_data,rep_samples=rep_samples, norm_clusters=cluster_list_rep_samples, k=k_value, num_clusters=clusters_nb,wd_data=wd_data,dir_norm_data=dir_name_norm_data)
data
raw_data
rep_samples
norm_clusters
luster_list_rep_samples
cluster_list_rep_samples
clusters_nb
wd_data
dir_name_norm_data
normalise_data(data=data,raw_data=raw_data,rep_samples=rep_samples, norm_clusters=cluster_list_rep_samples, k=k_value, num_clusters=clusters_nb,wd_data=wd_data,dir_norm_data=dir_name_norm_data)
colMeans(data[tmp, ]
)
data[tmp, ]
output_dir="CytofRUV_output"
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
wd_data=file.path(getwd(),output_dir)
metadata_filename="Metadata.xlsx"
panel_filename="Panel.xlsx"
seed=1234
clusters_nb=20
## Loading the data
data=load_data(wd_data,metadata_filename,panel_filename)
output_dir="CytofRUV_output"
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
wd_data=file.path(getwd(),output_dir)
wd_data
## Loading the data
data=load_data(wd_data,metadata_filename,panel_filename)
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/")
if (!dir.exists(output_dir)){
dir.create(output_dir)
}
wd_data=file.path(getwd(),output_dir)
metadata_filename="Metadata.xlsx"
panel_filename="Panel.xlsx"
seed=1234
clusters_nb=20
## Loading the data
data=load_data(wd_data,metadata_filename,panel_filename)
data[tmp, ]
## Cluster the data
data$daf=cluster_data(data$daf,seed,markers_to_use=data$lineage_markers,clusters_nb)
## CytofRUV normalisation procedure
dir_name_norm_data="CytofRUV_Norm_data_HC2_all_cl_20"
raw_data <- data.frame(sample = data$daf$sample_id, cluster=cluster_ids(data$daf,"meta20"), t(SummarizedExperiment::assay(data$daf,"exprs")))
colnames(raw_data) <- gsub("^X", "",  colnames(raw_data))
rep_samples=list(c("HC2_B1","HC2_B2"))
cluster_list_rep_samples <- list(seq(1,20))
k_value <- 5
seed=1234
data[,tmp]
normalise_data(data=data,raw_data=raw_data,rep_samples=rep_samples, norm_clusters=cluster_list_rep_samples, k=k_value, num_clusters=clusters_nb,wd_data=wd_data,dir_norm_data=dir_name_norm_data)
md
rep_samples
colMeans(data[tmp, ])
rep_samples
cluster_list_rep_samples
tmp=((raw_data$cluster == cluster_list_rep_samples[i])&(raw_data$sample%in%rep_samples))
tmp=((raw_data$cluster == cluster_list_rep_samples[1])&(raw_data$sample%in%rep_samples))
colMeans(raw_Y[tmp,])
tmp=((raw_data$cluster == cluster_list_rep_samples[1])&(raw_data$sample%in%rep_samples))
tmp
data
raw_Y <- as.matrix(raw_data[3:ncol(raw_data)])
colMeans(raw_Y[tmp,])
raw_data$cluster == cluster_list_rep_samples[1]
raw_data$sample%in%rep_samples
raw_data$cluster
cluster_list_rep_samples[1]
cluster_list_rep_samples[2]
cluster_list_rep_samples[3]
