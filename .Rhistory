df <- as.data.frame(p)
md <- colnames(colData(sce))
md <- md[!md %in% c('sample_id','cluster_id')]
i <- match(df$sample_id, sce$sample_id)
cd <- colData(sce)[i, md]
df <- cbind(df, cd)
}
# determine which method is suitable for statistics(n=2, or n>2)
md<-colnames(df)
md <- md[!md %in% c('sample_id','cluster_id','Freq','patient_id')]
if(!group %in% colnames(df)){
stop('Please choose the right group names for comparison as follows:',paste0(md,', '))
}else{ len<-length(unique(df[,group]))
}
# Non-parametric analysis(Mann Whitney) is suitable for two study group comparison
if(len==2){
message('n=2, Mann Whitney Wilcoxon test will be used for comparison')
Sys.sleep(1)
wil_test<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(wilcox.test(reformulate(group, response = 'Freq'),exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)%>%add_significance("p.value")
return(wil_test)
# Kruscal Wallis test is suitable for more than two study groups, by default, wilcoxon test will be used for post hoc analysis
# with BH mutlpiple testing correction
}else if(len>=3){
message('n=',len, ', Kruskal Wallis test will be used for comparison')
Sys.sleep(1)
KW_test<-df %>%
group_by(cluster_id) %>%
summarise(fit = list(kruskal.test(reformulate(group, response = 'Freq')) %>% tidy)) %>%
tidyr::unnest_wider(fit)%>%add_significance("p.value")
print(KW_test)
if(posthoc==T&method=='pairwise.wilcox.test'){
message('Pairwise wilcoxon test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
Sys.sleep(1)
w<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(pairwise.wilcox.test(Freq, df[,group], p.adjust.method = 'BH',exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)
print(as.data.frame(w))
return(as.data.frame(w))
# Dunn's test can also be quite useful for post hoc analysis after Kruscal Wallis
}else if(posthoc==T& method=='dunn.test'){
message('Dunns test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
d<-df %>% group_by(cluster_id)%>%dunn_test(reformulate(group, response = 'Freq'), p.adjust.method = 'hochberg')
print(as.data.frame(d))
return(as.data.frame(d))
}else if(posthoc==F){
message('Post hoc analysis is suggested for multiple group comparison')
}
}else{
message('Error: Study group needs to be >= 2, please choose the right variable')
}
}else if(type == 'DS'){
if(is.null(cluster_ids(sce))){
stop('Error: cluster id values are null')
# extract expression data
exprs<- as.data.frame(t(assay(sce)))
# check if the user specify type/state markers in the panel metadata
if(is.null(state_markers(sce))) {
message('State marker is null, please specify state markers in the panel metadata')
}
# check if 'group' parameter is correctly specified
m<-colnames(colData(sce))
m<-m[!m %in% c('sample_id','cluster_id','patient_id')]
if(!group%in%m){
stop('Please input the right name for group, options are:', m)
}
# evaluate the number of variables for the right statistical method
len <- length(unique(colData(sce)[,group]))
state_exprs<-exprs[,state_markers(sce)]
state_exprs<- cbind(state_exprs, sample_id = sce$sample_id, condition = colData(sce)[,group],cluster_id=cluster_ids(sce))
state_exprs_l<-melt(state_exprs,id.vars = c("sample_id",'condition','cluster_id'))
state_exprs_l<-state_exprs_l %>% group_by(sample_id,cluster_id,variable)%>%summarise(median(value))
meta<-select(as.data.frame(metadata(sce)$experiment_info),sample_id,group)
state_exprs_l<-merge(state_exprs_l,meta,by='sample_id')
# change the colname group into 'condition'
colnames(state_exprs_l)[ncol(state_exprs_l)]<-'condition'
# n=2 Mann-Whitney test
if(len == 2){
message('n=',len, ', Mann-Whitney test will be used for comparison')
MW_test <-state_exprs_l %>%
group_by(cluster_id, variable) %>%
summarise(p_value = wilcox.test(`median(value)` ~ condition)$p.value)%>%add_significance("p_value")
return(MW_test)
} else if(len>=3){
# n=3 pairwise wilcoxon test
message('n=',len, ', pair-wise wilcoxon test will be used for comparison')
suppressWarnings(
wilc_state_exprs <- state_exprs_l %>%
group_by(cluster_id,variable) %>%
summarise(fit3 = list(pairwise.wilcox.test(`median(value)`, condition, p.adjust.method = 'BH') %>% tidy)) %>%
unnest_wider(fit3))
return(wilc_state_exprs)
} else {
message('The length of variables for comparison should > 2')
}
}else if(type=='DS'){
message('Differential expression test')
} else{
message('Please input the right type for statistical anlaysis: DS, DA')
}
}
}
statTest(sce,type='DW',group='disease')
statTest(sce,type='DW',group='disease')
statTest(sce,type='DS',group='disease')
#' @export
#'
#' @examples
#' # Use sce object as input data, and specify method for post hoc analysis as dunn's test
#' # define the results as s object
#' s<-statTest(sce,group='outcome',posthoc=T,method='dunn.test')
#' # The function can automatically determine whether there are more than two groups, and apply KW and Pairwise Wilcoxon Rank Sum Tests by default
#' s<-statTest(sce,group='outcome')
#' # Input data can be a data frame instead of a sce object, just in case certain statistical modification has to be done before statistical comparison(e.g.remove certain outliers)
#' s<-statTest(abuntable=at,group='condition')
statTest<-function(sce,abuntable=NULL,type='DA',group,posthoc=T, method='pairwise.wilcox.test'){
#Users can either use sce object directly to do the statistics or use the output table from abunTable(),
#Just in case in some circumstances, certain outliers have to be removed before the statistics analysis
if(type=='DA'){
if(!is.null(abuntable)){
df<-abuntable
if(!is(abuntable,'data.frame')){
stop('Input table is not data.frame, please choose the correct one generated by abunTable()')
}
}else{
if(is.null(cluster_ids(sce))){
message('Error: cluster id values are null')
}
n <- table(
sample_id = sce$sample_id,
cluster_id = sce$cluster_id)
p <- prop.table(n, 1)
# turn into tidy table
df <- as.data.frame(p)
md <- colnames(colData(sce))
md <- md[!md %in% c('sample_id','cluster_id')]
i <- match(df$sample_id, sce$sample_id)
cd <- colData(sce)[i, md]
df <- cbind(df, cd)
}
# determine which method is suitable for statistics(n=2, or n>2)
md<-colnames(df)
md <- md[!md %in% c('sample_id','cluster_id','Freq','patient_id')]
if(!group %in% colnames(df)){
stop('Please choose the right group names for comparison as follows:',paste0(md,', '))
}else{ len<-length(unique(df[,group]))
}
# Non-parametric analysis(Mann Whitney) is suitable for two study group comparison
if(len==2){
message('n=2, Mann Whitney Wilcoxon test will be used for comparison')
Sys.sleep(1)
wil_test<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(wilcox.test(reformulate(group, response = 'Freq'),exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)%>%add_significance("p.value")
return(wil_test)
# Kruscal Wallis test is suitable for more than two study groups, by default, wilcoxon test will be used for post hoc analysis
# with BH mutlpiple testing correction
}else if(len>=3){
message('n=',len, ', Kruskal Wallis test will be used for comparison')
Sys.sleep(1)
KW_test<-df %>%
group_by(cluster_id) %>%
summarise(fit = list(kruskal.test(reformulate(group, response = 'Freq')) %>% tidy)) %>%
tidyr::unnest_wider(fit)%>%add_significance("p.value")
print(KW_test)
if(posthoc==T&method=='pairwise.wilcox.test'){
message('Pairwise wilcoxon test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
Sys.sleep(1)
w<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(pairwise.wilcox.test(Freq, df[,group], p.adjust.method = 'BH',exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)
print(as.data.frame(w))
return(as.data.frame(w))
# Dunn's test can also be quite useful for post hoc analysis after Kruscal Wallis
}else if(posthoc==T& method=='dunn.test'){
message('Dunns test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
d<-df %>% group_by(cluster_id)%>%dunn_test(reformulate(group, response = 'Freq'), p.adjust.method = 'hochberg')
print(as.data.frame(d))
return(as.data.frame(d))
}else if(posthoc==F){
message('Post hoc analysis is suggested for multiple group comparison')
}
}else{
message('Error: Study group needs to be >= 2, please choose the right variable')
}
}else if(type == 'DS'){
if(is.null(cluster_ids(sce))){
stop('Error: cluster id values are null')
# extract expression data
exprs<- as.data.frame(t(assay(sce)))
# check if the user specify type/state markers in the panel metadata
if(is.null(state_markers(sce))) {
message('State marker is null, please specify state markers in the panel metadata')
}
# check if 'group' parameter is correctly specified
m<-colnames(colData(sce))
m<-m[!m %in% c('sample_id','cluster_id','patient_id')]
if(!group%in%m){
stop('Please input the right name for group, options are:', m)
}
# evaluate the number of variables for the right statistical method
len <- length(unique(colData(sce)[,group]))
state_exprs<-exprs[,state_markers(sce)]
state_exprs<- cbind(state_exprs, sample_id = sce$sample_id, condition = colData(sce)[,group],cluster_id=cluster_ids(sce))
state_exprs_l<-melt(state_exprs,id.vars = c("sample_id",'condition','cluster_id'))
state_exprs_l<-state_exprs_l %>% group_by(sample_id,cluster_id,variable)%>%summarise(median(value))
meta<-select(as.data.frame(metadata(sce)$experiment_info),sample_id,group)
state_exprs_l<-merge(state_exprs_l,meta,by='sample_id')
# change the colname group into 'condition'
colnames(state_exprs_l)[ncol(state_exprs_l)]<-'condition'
# n=2 Mann-Whitney test
if(len == 2){
message('n=',len, ', Mann-Whitney test will be used for comparison')
MW_test <-state_exprs_l %>%
group_by(cluster_id, variable) %>%
summarise(p_value = wilcox.test(`median(value)` ~ condition)$p.value)%>%add_significance("p_value")
return(MW_test)
} else if(len>=3){
# n=3 pairwise wilcoxon test
message('n=',len, ', pair-wise wilcoxon test will be used for comparison')
suppressWarnings(
wilc_state_exprs <- state_exprs_l %>%
group_by(cluster_id,variable) %>%
summarise(fit3 = list(pairwise.wilcox.test(`median(value)`, condition, p.adjust.method = 'BH') %>% tidy)) %>%
unnest_wider(fit3))
return(wilc_state_exprs)
} else {
message('The length of variables for comparison should > 2')
}
}else if(type=='DS'){
message('Differential expression test')
} else {
message('Please input the right type for statistical anlaysis: DS, DA')
}
}
}
statTest(sce,type='DS',group='disease')
statTest(sce,type='DM',group='disease')
#' @export
#'
#' @examples
#' # Use sce object as input data, and specify method for post hoc analysis as dunn's test
#' # define the results as s object
#' s<-statTest(sce,group='outcome',posthoc=T,method='dunn.test')
#' # The function can automatically determine whether there are more than two groups, and apply KW and Pairwise Wilcoxon Rank Sum Tests by default
#' s<-statTest(sce,group='outcome')
#' # Input data can be a data frame instead of a sce object, just in case certain statistical modification has to be done before statistical comparison(e.g.remove certain outliers)
#' s<-statTest(abuntable=at,group='condition')
statTest<-function(sce,abuntable=NULL,type='DA',group,posthoc=T, method='pairwise.wilcox.test'){
#Users can either use sce object directly to do the statistics or use the output table from abunTable(),
#Just in case in some circumstances, certain outliers have to be removed before the statistics analysis
if(type=='DA'){
if(!is.null(abuntable)){
df<-abuntable
if(!is(abuntable,'data.frame')){
stop('Input table is not data.frame, please choose the correct one generated by abunTable()')
}
}else{
if(is.null(cluster_ids(sce))){
message('Error: cluster id values are null')
}
n <- table(
sample_id = sce$sample_id,
cluster_id = sce$cluster_id)
p <- prop.table(n, 1)
# turn into tidy table
df <- as.data.frame(p)
md <- colnames(colData(sce))
md <- md[!md %in% c('sample_id','cluster_id')]
i <- match(df$sample_id, sce$sample_id)
cd <- colData(sce)[i, md]
df <- cbind(df, cd)
}
# determine which method is suitable for statistics(n=2, or n>2)
md<-colnames(df)
md <- md[!md %in% c('sample_id','cluster_id','Freq','patient_id')]
if(!group %in% colnames(df)){
stop('Please choose the right group names for comparison as follows:',paste0(md,', '))
}else{ len<-length(unique(df[,group]))
}
# Non-parametric analysis(Mann Whitney) is suitable for two study group comparison
if(len==2){
message('n=2, Mann Whitney Wilcoxon test will be used for comparison')
Sys.sleep(1)
wil_test<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(wilcox.test(reformulate(group, response = 'Freq'),exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)%>%add_significance("p.value")
return(wil_test)
# Kruscal Wallis test is suitable for more than two study groups, by default, wilcoxon test will be used for post hoc analysis
# with BH mutlpiple testing correction
}else if(len>=3){
message('n=',len, ', Kruskal Wallis test will be used for comparison')
Sys.sleep(1)
KW_test<-df %>%
group_by(cluster_id) %>%
summarise(fit = list(kruskal.test(reformulate(group, response = 'Freq')) %>% tidy)) %>%
tidyr::unnest_wider(fit)%>%add_significance("p.value")
print(KW_test)
if(posthoc==T&method=='pairwise.wilcox.test'){
message('Pairwise wilcoxon test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
Sys.sleep(1)
w<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(pairwise.wilcox.test(Freq, df[,group], p.adjust.method = 'BH',exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)
print(as.data.frame(w))
return(as.data.frame(w))
# Dunn's test can also be quite useful for post hoc analysis after Kruscal Wallis
}else if(posthoc==T& method=='dunn.test'){
message('Dunns test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
d<-df %>% group_by(cluster_id)%>%dunn_test(reformulate(group, response = 'Freq'), p.adjust.method = 'hochberg')
print(as.data.frame(d))
return(as.data.frame(d))
}else if(posthoc==F){
message('Post hoc analysis is suggested for multiple group comparison')
}
}else{
message('Error: Study group needs to be >= 2, please choose the right variable')
}
}else if(type == 'DS'){
if(is.null(cluster_ids(sce))){
stop('Error: cluster id values are null')
# extract expression data
exprs<- as.data.frame(t(assay(sce)))
# check if the user specify type/state markers in the panel metadata
if(is.null(state_markers(sce))) {
message('State marker is null, please specify state markers in the panel metadata')
}
# check if 'group' parameter is correctly specified
m<-colnames(colData(sce))
m<-m[!m %in% c('sample_id','cluster_id','patient_id')]
if(!group%in%m){
stop('Please input the right name for group, options are:', m)
}
# evaluate the number of variables for the right statistical method
len <- length(unique(colData(sce)[,group]))
state_exprs<-exprs[,state_markers(sce)]
state_exprs<- cbind(state_exprs, sample_id = sce$sample_id, condition = colData(sce)[,group],cluster_id=cluster_ids(sce))
state_exprs_l<-melt(state_exprs,id.vars = c("sample_id",'condition','cluster_id'))
state_exprs_l<-state_exprs_l %>% group_by(sample_id,cluster_id,variable)%>%summarise(median(value))
meta<-select(as.data.frame(metadata(sce)$experiment_info),sample_id,group)
state_exprs_l<-merge(state_exprs_l,meta,by='sample_id')
# change the colname group into 'condition'
colnames(state_exprs_l)[ncol(state_exprs_l)]<-'condition'
# n=2 Mann-Whitney test
if(len == 2){
message('n=',len, ', Mann-Whitney test will be used for comparison')
MW_test <-state_exprs_l %>%
group_by(cluster_id, variable) %>%
summarise(p_value = wilcox.test(`median(value)` ~ condition)$p.value)%>%add_significance("p_value")
return(MW_test)
} else if(len>=3){
# n=3 pairwise wilcoxon test
message('n=',len, ', pair-wise wilcoxon test will be used for comparison')
suppressWarnings(
wilc_state_exprs <- state_exprs_l %>%
group_by(cluster_id,variable) %>%
summarise(fit3 = list(pairwise.wilcox.test(`median(value)`, condition, p.adjust.method = 'BH') %>% tidy)) %>%
unnest_wider(fit3))
return(wilc_state_exprs)
} else {
message('The length of variables for comparison should > 2')
}
}else if(type=='DS'){
message('Differential expression test')
}
else {
message('Please input the right type for statistical anlaysis: DS, DA')
}
}
}
statTest(sce,type='DM',group='disease')
#' @export
#'
#' @examples
#' # Use sce object as input data, and specify method for post hoc analysis as dunn's test
#' # define the results as s object
#' s<-statTest(sce,group='outcome',posthoc=T,method='dunn.test')
#' # The function can automatically determine whether there are more than two groups, and apply KW and Pairwise Wilcoxon Rank Sum Tests by default
#' s<-statTest(sce,group='outcome')
#' # Input data can be a data frame instead of a sce object, just in case certain statistical modification has to be done before statistical comparison(e.g.remove certain outliers)
#' s<-statTest(abuntable=at,group='condition')
statTest<-function(sce,abuntable=NULL,type='DA',group,posthoc=T, method='pairwise.wilcox.test'){
#Users can either use sce object directly to do the statistics or use the output table from abunTable(),
#Just in case in some circumstances, certain outliers have to be removed before the statistics analysis
if(type=='DA'){
if(!is.null(abuntable)){
df<-abuntable
if(!is(abuntable,'data.frame')){
stop('Input table is not data.frame, please choose the correct one generated by abunTable()')
}
}else{
if(is.null(cluster_ids(sce))){
message('Error: cluster id values are null')
}
n <- table(
sample_id = sce$sample_id,
cluster_id = sce$cluster_id)
p <- prop.table(n, 1)
# turn into tidy table
df <- as.data.frame(p)
md <- colnames(colData(sce))
md <- md[!md %in% c('sample_id','cluster_id')]
i <- match(df$sample_id, sce$sample_id)
cd <- colData(sce)[i, md]
df <- cbind(df, cd)
}
# determine which method is suitable for statistics(n=2, or n>2)
md<-colnames(df)
md <- md[!md %in% c('sample_id','cluster_id','Freq','patient_id')]
if(!group %in% colnames(df)){
stop('Please choose the right group names for comparison as follows:',paste0(md,', '))
}else{ len<-length(unique(df[,group]))
}
# Non-parametric analysis(Mann Whitney) is suitable for two study group comparison
if(len==2){
message('n=2, Mann Whitney Wilcoxon test will be used for comparison')
Sys.sleep(1)
wil_test<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(wilcox.test(reformulate(group, response = 'Freq'),exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)%>%add_significance("p.value")
return(wil_test)
# Kruscal Wallis test is suitable for more than two study groups, by default, wilcoxon test will be used for post hoc analysis
# with BH mutlpiple testing correction
}else if(len>=3){
message('n=',len, ', Kruskal Wallis test will be used for comparison')
Sys.sleep(1)
KW_test<-df %>%
group_by(cluster_id) %>%
summarise(fit = list(kruskal.test(reformulate(group, response = 'Freq')) %>% tidy)) %>%
tidyr::unnest_wider(fit)%>%add_significance("p.value")
print(KW_test)
if(posthoc==T&method=='pairwise.wilcox.test'){
message('Pairwise wilcoxon test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
Sys.sleep(1)
w<-df %>%
group_by(cluster_id) %>%
summarise(fit3 = list(pairwise.wilcox.test(Freq, df[,group], p.adjust.method = 'BH',exact=F) %>% tidy)) %>%
tidyr::unnest_wider(fit3)
print(as.data.frame(w))
return(as.data.frame(w))
# Dunn's test can also be quite useful for post hoc analysis after Kruscal Wallis
}else if(posthoc==T& method=='dunn.test'){
message('Dunns test will be done among the study groups, multiple comparison corrected by Benjamini-Hochberg procedure')
d<-df %>% group_by(cluster_id)%>%dunn_test(reformulate(group, response = 'Freq'), p.adjust.method = 'hochberg')
print(as.data.frame(d))
return(as.data.frame(d))
}else if(posthoc==F){
message('Post hoc analysis is suggested for multiple group comparison')
}
}else{
message('Error: Study group needs to be >= 2, please choose the right variable')
}
}else if(type == 'DS'){
if(is.null(cluster_ids(sce))){
stop('Error: cluster id values are null')
# extract expression data
exprs<- as.data.frame(t(assay(sce)))
# check if the user specify type/state markers in the panel metadata
if(is.null(state_markers(sce))) {
message('State marker is null, please specify state markers in the panel metadata')
}
# check if 'group' parameter is correctly specified
m<-colnames(colData(sce))
m<-m[!m %in% c('sample_id','cluster_id','patient_id')]
if(!group%in%m){
stop('Please input the right name for group, options are:', m)
}
# evaluate the number of variables for the right statistical method
len <- length(unique(colData(sce)[,group]))
state_exprs<-exprs[,state_markers(sce)]
state_exprs<- cbind(state_exprs, sample_id = sce$sample_id, condition = colData(sce)[,group],cluster_id=cluster_ids(sce))
state_exprs_l<-melt(state_exprs,id.vars = c("sample_id",'condition','cluster_id'))
state_exprs_l<-state_exprs_l %>% group_by(sample_id,cluster_id,variable)%>%summarise(median(value))
meta<-select(as.data.frame(metadata(sce)$experiment_info),sample_id,group)
state_exprs_l<-merge(state_exprs_l,meta,by='sample_id')
# change the colname group into 'condition'
colnames(state_exprs_l)[ncol(state_exprs_l)]<-'condition'
# n=2 Mann-Whitney test
if(len == 2){
message('n=',len, ', Mann-Whitney test will be used for comparison')
MW_test <-state_exprs_l %>%
group_by(cluster_id, variable) %>%
summarise(p_value = wilcox.test(`median(value)` ~ condition)$p.value)%>%add_significance("p_value")
return(MW_test)
} else if(len>=3){
# n=3 pairwise wilcoxon test
message('n=',len, ', pair-wise wilcoxon test will be used for comparison')
suppressWarnings(
wilc_state_exprs <- state_exprs_l %>%
group_by(cluster_id,variable) %>%
summarise(fit3 = list(pairwise.wilcox.test(`median(value)`, condition, p.adjust.method = 'BH') %>% tidy)) %>%
unnest_wider(fit3))
return(wilc_state_exprs)
} else {
message('The length of variables for comparison should > 2')
}
}else if(type=='DS'){
message('Differential expression test')
} else {
message('Please input the right type for statistical anlaysis: DS, DA')
}
}
}
statTest(sce,type='DM',group='disease')
