fcs_files <- list.files(fcs_dir, pattern = "fcs$")
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
all(panel$fcs_colname %in% colnames(fs))
all(panel$fcs_colname %in% markernames(fs))
featureNames(fs)
phenoData(fs)
summary(fs)
colnames(fs)
View(fs)
fs@frames
fs@phenoData
exprs(fs)
fs$exprs
fs
column names
str(fs)
fs$dimLabels
columnNames(fs)
colnames(fs)
devtools::load_all("BInaryClust2")
devtools::load_all("BInaryClust2")
#####test#####
fcs_dir <- 'fcs'
metadata_dir <- 'fcs/metadata3.xlsx'
panel_dir <- "fcs/panel_metadata2.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
plotExprs(prepsce, color_by = "batch")
pbMDS(prepsce, color_by="batch")
plotExprHeatmap(prepsce, bin_anno = TRUE, row_anno = TRUE)
set.seed(1234)
prepsce <- CATALYST::cluster(prepsce, features = type_markers(prepsce),
xdim = 10, ydim = 10, maxK = 20, seed = 1234)
prepsce <- runDR(prepsce, dr = "UMAP", cells = 2000, features = "type")
plotDR(sce, "UMAP", color_by = "batch")
plotDR(prepsce, "UMAP", color_by = "batch")
plotAbundances(prepsce, k = "meta20", by = "cluster_id", shape = "patient_id")
plotAbundances(prepsce, k = "meta20", by = "sample_id")
par(mfrow = c(1, 2))
plotDR(prepsce, "UMAP", color_by = "batch")
plotAbundances(prepsce, k = "meta20", by = "sample_id")
par()
plotDR(prepsce, "UMAP", color_by = "batch")
plotAbundances(prepsce, k = "meta20", by = "sample_id")
DR<-plotDR(prepsce, "UMAP", color_by = "batch")
Stack<-plotAbundances(prepsce, k = "meta20", by = "sample_id")
plot_grid(DR, Stack,
labels = c('A','B'),
nrow = 1, align = "l", label_size = 24)
??plot_grid
library(cowplot)
plot_grid(DR, Stack,
labels = c('A','B'),
nrow = 1, align = "l", label_size = 24)
plot_grid(DR, Stack,
labels = c('A','B'),
nrow = 1, align = "l", label_size = 10)
k=20
paste0('meta',k)
batchExam <- function(prepsce,xdim=10,ydim=10,k=20,seed=1234,downsample=2000,DR_method='UMAP'){
set.seed(seed)
if(!is(sce,'SingleCellExperiment')){
message('Error: please input an sce object generated by batchPrep function.')
}
message('Running flowSOM clustering...')
prepsce <- CATALYST::cluster(prepsce, features = type_markers(prepsce),
xdim = xdim, ydim = ydim, maxK = k, seed = seed)
message('Running DR...')
if(DR_method=='UMAP'){
prepsce <- runDR(prepsce, dr = "UMAP", cells = downsample, features = "type")
DR<-plotDR(prepsce, "UMAP", color_by = "batch")
} else if(DR_method=='TSNE'){
prepsce <- runDR(prepsce, dr = "TSNE", cells = downsample, features = "type")
DR<-plotDR(prepsce, "TSNE", color_by = "batch")
} else{
message('Please choose the right method for dimension reduction: UMAP or TSNE')
}
message('Plotting...')
Stack<-plotAbundances(prepsce, k = paste0('meta',k), by = "sample_id")
plot_grid(DR, Stack,
labels = c('A','B'),
nrow = 1, align = "l", label_size = 10)
}
batchExam(prepsce)
batchExam <- function(prepsce,xdim=10,ydim=10,k=20,seed=1234,downsample=2000,DR_method='UMAP'){
set.seed(seed)
if(!is(prepsce,'SingleCellExperiment')){
message('Error: please input an sce object generated by batchPrep function.')
}
message('Running flowSOM clustering...')
prepsce <- CATALYST::cluster(prepsce, features = type_markers(prepsce),
xdim = xdim, ydim = ydim, maxK = k, seed = seed)
message('Running DR...')
if(DR_method=='UMAP'){
prepsce <- runDR(prepsce, dr = "UMAP", cells = downsample, features = "type")
DR<-plotDR(prepsce, "UMAP", color_by = "batch")
} else if(DR_method=='TSNE'){
prepsce <- runDR(prepsce, dr = "TSNE", cells = downsample, features = "type")
DR<-plotDR(prepsce, "TSNE", color_by = "batch")
} else{
message('Please choose the right method for dimension reduction: UMAP or TSNE')
}
message('Plotting...')
Stack<-plotAbundances(prepsce, k = paste0('meta',k), by = "sample_id")
plot_grid(DR, Stack,
labels = c('A','B'),
nrow = 1, align = "l", label_size = 10)
}
batchExam(prepsce)
use_r('batchExam')
devtools::load_all("BInaryClust2")
rm(list = c("batchExam"))
devtools::load_all("BInaryClust2")
?batchExam
devtools::load_all("BInaryClust2")
devtools::load_all("BInaryClust2")
?batchExam
devtools::load_all("BInaryClust2")
?batchExam
devtools::load_all("BInaryClust2")
?batchExam
devtools::load_all("BInaryClust2")
?batchExam
########data prep############
fcs_dir <- 'fcs'
metadata_dir <- 'fcs/metadata3.xlsx'
panel_dir <- "fcs/panel_metadata2.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
pbMDS(prepsce, color_by="batch")
batchExam(prepsce)
batchExam(prepsce,downsample=1000,DR_method='TSNE')
?batchNorm
########batch effect correction if needed#########
batchNorm(fcs_dir,me_dir,panel_dir)
########batch effect correction if needed#########
batchNorm(fcs_dir,metadata_dir,panel_dir)
library(CytoNorm)
########batch effect correction if needed#########
batchNorm(fcs_dir,metadata_dir,panel_dir)
devtools::load_all("BInaryClust2")
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
########batch effect correction if needed#########
batchNorm(fcs_dir,metadata_dir,panel_dir)
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
library(CytofRUV)
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
wd_data <-getwd()
wd_data
seed=1234
clusters_nb=20
md <- read_excel(md_dir)
md <- read_excel(metadata_dir)
## Loading the data
data=load_data(wd_data,md_dir,panel_dir)
## Loading the data
data=load_data(wd_data,metadata_dir,panel_dir)
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/Susann_new/fcs")
wd_data <-getwd()
getwd()
md_dir <- 'metadata2.xlsx'
md <- read_excel(metadata_dir)
md <- read_excel(md_dir)
md
panel_dir <- 'panel_metadata.xlsx'
panel <- read_excel(panel_dir)
## Loading the data
data=load_data(wd_data,md_dir,panel_dir)
batchNorm(md_dir,panel_dir,method='CytofRUV')
batchNorm(fcs_dir,md_dir,panel_dir,method='CytofRUV')
data$daf=cluster_data(data$daf,seed,markers_to_use=data$lineage_markers,clusters_nb)
dir_name_norm_data='Norm_data'
rep_samples=list(c(filter(md,condition=='HD')$sample_id))
filter(md,condition=='HD')
md
library(dplyr)
filter(md,condition=='HD')
batchNorm(fcs_dir,md_dir,panel_dir,method='CytofRUV')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development')
``
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development")
#check Susann dataset
fcs_dir <- 'Susann_new/fcs'
devtools::load_all("BInaryClust2")
#check Susann dataset
fcs_dir <- 'Susann_new/fcs'
metadata_dir <- 'fcs/metadata3.xlsx'
metadata_dir <- 'Susann_new/fcs/metadata2.xlsx'
readxl(metadata_dir)
read_excel(metadata_dir)
#check Susann dataset
fcs_dir <- 'Susann_new/fcs'
metadata_dir <- 'Susann_new/fcs/metadata2.xlsx'
panel_dir <- "fcs/panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
panel_dir <- "Susann_new/fcs/panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
getwd()
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
wd_data <-fcs_dir
?wd_data
wd_data
seed=1234
md <- read_excel(md_dir)
wd_data <-fcs_dir
seed=1234
clusters_nb=nClus
md <- read_excel(md_dir)
getwd()
file.path(getwd(),fcs_dir)
devtools::load_all("BInaryClust2")
#check Susann dataset
fcs_dir <- 'Susann_new/fcs'
metadata_dir <- 'Susann_new/fcs/metadata2.xlsx'
panel_dir <- "Susann_new/fcs/panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
#check Susann dataset
fcs_dir <- 'Susann_new/fcs'
metadata_dir <- 'Susann_new/fcs/metadata2.xlsx'
panel_dir <- "Susann_new/fcs/panel_metadata.xlsx"
getwd()
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
devtools::load_all("BInaryClust2")
## Loading the data
data=load_data(wd_data,md_dir,panel_dir)
devtools::load_all("BInaryClust2")
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
devtools::load_all("BInaryClust2")
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
devtools::load_all("BInaryClust2")
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
wd_data <-file.path(getwd(),fcs_dir)
wd_data
seed=1234
clusters_nb=20
md <- read_excel(md_dir)
md <- read_excel(metadata_dir)
## Loading the data
data=load_data(wd_data,metadata_dir,panel_dir)
file.path(wd_data, metadata_dir)
devtools::load_all("BInaryClust2")
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/Susann_new/fcs")
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
batchNorm(fcs_dir,metadata_dir,panel_dir)
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
plotExprs(prepsce, color_by = "batch")
pbMDS(prepsce, color_by="batch")
plotExprHeatmap(prepsce, bin_anno = TRUE, row_anno = TRUE)
plotExprHeatmap(prepsce, bin_anno = TRUE, row_anno = TRUE)
plotExprHeatmap(prepsce, bin_anno = TRUE, row_anno = TRUE)
pbMDS(prepsce, color_by="batch")
pbMDS(prepsce, color_by="batch")
library(readxl)
library(CATALYST)
library(SingleCellExperiment)
library(flowCore)
library(cowplot)
library(CytoNorm)
library(CytofRUV)
library(dplyr)
fcs_dir <- getwd()
fcs_dir
fcs_dir <- getwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/Susann_new/fcs")
metadata_dir <- 'metadata2.xlsx'
#check Susann dataset
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/Susann_new/fcs")
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
library(BinaryClust2)
downsample()
devtools::load_all(".")
#check Susann dataset
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/Susann_new/fcs")
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
library(readxl)
library(CATALYST)
library(SingleCellExperiment)
library(flowCore)
library(cowplot)
library(CytoNorm)
library(CytofRUV)
library(dplyr)
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
pbMDS(prepsce, color_by="batch")
plotExprs(prepsce, color_by = "batch")
plotExprHeatmap(prepsce, bin_anno = TRUE, row_anno = TRUE)
output_dir='Norm_output'
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
prepsce<-batchPrep(output_dir,metadata_dir,panel_dir)
metadata_dir <- 'Norm_output/Norm_Metadata.xlsx'
prepsce<-batchPrep(output_dir,metadata_dir,panel_dir)
fcs_dir<-output_dir
file.path(output_dir,'Norm_metadata')
metadata_dir <- file.path(output_dir,'Norm_Metadata')
metadata_dir <- file.path(output_dir,'Norm_Panel')
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
metadata_dir <- file.path(output_dir,'Norm_Metadata.xlsx')
metadata_dir <- file.path(output_dir,'Norm_Panel.xlsx')
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
read_excel(metadata_dir)
fcs_dir<-output_dir
metadata_dir <- file.path(output_dir,'Norm_Metadata.xlsx')
read_excel(metadata_dir)
panel_dir <- file.path(output_dir,'Norm_Panel.xlsx')
read_excel(panel_dir)
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
prepsce_norm<-batchPrep(fcs_dir,metadata_dir,panel_dir)
pbMDS(prepsce_norm, color_by="batch")
plotExprHeatmap(prepsce, bin_anno = TRUE, row_anno = TRUE)
plotExprs(prepsce, color_by = "batch")
plotExprs(prepsce_norm, color_by = "batch")
#patch for batchNorm: cytoNorm: add
md<-read_excel(metadata_dir)
panel<-read_excel(panel_dir)
md
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
md<-read_excel(metadata_dir)
panel<-read_excel(panel_dir)
md
md$file_name <- paste("Norm_", md$file_name, sep = "")
md
library(writexl)
getwd()
ourput_dir
output_dir
write_xlsx(md, path = file.path(output_dir,'Norm_md.xlsx'))
write_xlsx(panel, path = file.path(output_dir,'Norm_panel.xlsx'))
library(devtools)
use_package('writexl')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
output_dir <- 'Norm_output'
batchNorm(fcs_dir,metadata_dir,panel_dir,output_dir = output_dir)
batchNorm(fcs_dir,metadata_dir,panel_dir)
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
batchNorm(fcs_dir,metadata_dir,panel_dir)
output_dir <- 'Norm_output'
output_dir <- 'Norm_Output'
batchNorm(fcs_dir,metadata_dir,panel_dir)
metadata_dir <- file.path(output_dir,'Norm_md.xlsx')
panel_dir <- file.path(output_dir,'Norm_panel.xlsx')
prepsce_norm<-batchPrep(fcs_dir,metadata_dir,panel_dir)
metadata_dir_norm <- file.path(output_dir,'Norm_md.xlsx')
panel_dir_norm <- file.path(output_dir,'Norm_panel.xlsx')
fcs_dir_norm <- output_dir
prepsce_norm<-batchPrep(fcs_dir_norm,metadata_dir_norm,panel_dir_norm)
prepsce_norm<-batchPrep(fcs_dir_norm,metadata_dir_norm,panel_dir_norm)
metadata_dir_norm <- file.path(output_dir,'Norm_md.xlsx')
panel_dir_norm <- file.path(output_dir,'Norm_panel.xlsx')
fcs_dir_norm <- output_dir
output_dir <- 'Norm_Output'
metadata_dir_norm <- file.path(output_dir,'Norm_md.xlsx')
panel_dir_norm <- file.path(output_dir,'Norm_panel.xlsx')
fcs_dir_norm <- output_dir
prepsce_norm<-batchPrep(fcs_dir_norm,metadata_dir_norm,panel_dir_norm)
metadata_dir_norm
panel_dir_norm
fcs_dir_norm
getwd()
prepsce_norm<-batchPrep(fcs_dir_norm,metadata_dir_norm,panel_dir_norm)
?batchPrep
prepsce_norm<-batchPrep(fcs_dir=fcs_dir_norm,md_dir=metadata_dir_norm,panel_dir=panel_dir_norm)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
prepsce_norm<-batchPrep(fcs_dir=fcs_dir_norm,md_dir=metadata_dir_norm,panel_dir=panel_dir_norm)
md <- read_excel(metadata_dir_norm)
md
md$batch <- factor(md$batch)
md$condition  <- factor(md$condition)
md$sample_id  <- factor(md$sample_id, levels = md$sample_id[order(md$condition)])
md$patient_id <- factor(md$patient_id)
panel <- read_excel(panel_dir_norm)
panel
#remove possible problematic strings
panel$antigen <- gsub("-", "_", panel$antigen)
#read fcs files
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
#read fcs files
fcs_files <- list.files(fcs_dir_norm, pattern = "fcs$")
fcs_files
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
fs <- read.flowSet(file.path(fcs_dir_norm, fcs_files))
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('batch','condition','patient_id')), features = panel$fcs_colname)
########data prep############
fcs_dir <- 'fcs'
#check Susann dataset
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/Susann_new/fcs")
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
fs
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir,method='CytofRUV')
batchNorm(fcs_dir,metadata_dir,panel_dir)
fcs_files
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
fcs_files
data  <- data.frame(File = fcs_files,
Path = file.path(fcs_dir, fcs_files),
Type = md$condition,
Batch = md$batch,
stringsAsFactors = FALSE)
data
data$Type <- ifelse(data$Type == 'Ref', 'Train', 'Validation')
train_data <- dplyr::filter(data, Type == "Train")
train_data
data
md
md_dir
metadata_dir
md <- read_excel(metadata_dir)
md
panel <- read_excel(panel_dir)
data  <- data.frame(File = fcs_files,
Path = file.path(fcs_dir, fcs_files),
Type = md$condition,
Batch = md$batch,
stringsAsFactors = FALSE)
data
View(data)
fcs_files
stringr::str_match(files, "_([12]).fcs")[, 2]
stringr::str_match(fcs_files, "_([12]).fcs")[, 2]
fcs_files
md
md[match(fcs_files, md$file_name), ]
md[match(fcs_files, md$file_name), ]$condition
data  <- data.frame(File = fcs_files,
Path = file.path(fcs_dir, fcs_files),
Type = md[match(fcs_files, md$file_name), ]$condition,
Batch = md[match(fcs_files, md$file_name), ]$batch,
stringsAsFactors = FALSE)
data
data$Type <- ifelse(data$Type == 'Ref', 'Train', 'Validation')
data
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
train_data
train_data
train_data$Path
list.files(train_data$Path)
list.files(train_data$Path,fill.names=T)
fcs_dir
train_data$Path[1]
####batch effect correction########
output_dir
####batch effect correction########
output_dir<-'Norm_output'
file.copy(train_data$Path,output_dir)
md
md$file_name
md$file_name[md$condition!='Ref']
md$file_name[md$condition!='Ref'] <- paste("Norm_", md$file_name[md$condition!='Ref'], sep = "")
md
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
fcs_dir <- getwd()
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata.xlsx"
batchNorm(fcs_dir,metadata_dir,panel_dir)
metadata_dir_norm <- file.path(output_dir,'Norm_md.xlsx')
panel_dir_norm <- file.path(output_dir,'Norm_panel.xlsx')
fcs_dir_norm <- output_dir
md <- read_excel(metadata_dir_norm)
md
prepsce_norm<-batchPrep(fcs_dir=fcs_dir_norm,md_dir=metadata_dir_norm,panel_dir=panel_dir_norm)
pbMDS(prepsce_norm, color_by="batch")
help(package='CATALYST')
help(package='CATALYST')
help(package='CytoRUV')
help(package='CytofRUV')
help(package='ImmunoCluster')
help(package='CytoNorm')
help(package='immunoCluster')
help(package='CytoNorm')
help(package='immunoCluster')
library(BinaryClust2)
help(package='BinaryClust2')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
help(package='BinaryClust2')
help(package='BinaryClust2')
help(package='BinaryClust2')
library(BinaryClust2)
library(devtools)
use_vignette('Intro_to_batch_exam_corrct',title='Introduction to batch examination and correction')
library(devtools)
install_github("JingAnyaSun/BinaryClust2")
library(devtools)
install_github("JingAnyaSun/BinaryClust2")
