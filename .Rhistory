plotExprHeatmap(prepsce_norm, bin_anno = TRUE, row_anno = TRUE)
batchExam(prepsce_norm,downsample=2000,k=25,DR_method='UMAP')
batchExam(prepsce_norm,downsample=1000,DR_method='TSNE')
batchExam(prepsce_norm,downsample=1000,DR_method='TSNE')
batchNorm(fcs_dir,metadata_dir,panel_dir)
use_vignettes('Intro_to_data_analysis',title='Introduction to BinaryClust2 data analysis pipeline')
library(devtools)
use_vignette("Intro_to_data_analysis", title = "Introduction to BinaryClust2 data analysis pipeline")
help(package='BinaryClust2')
help(package='CATALYST')
library(BinaryClust2)
library(BinaryClust2)
library(CATALYST)
library(readxl)
library(flowCore)
library(SingleCellExperiment)
library(cowplot)
library(ggplot2)
library(reshape2)
library(dplyr)
library(caret)
library(rstatix)
library(Rphenograph)
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/fcs")
metadata_dir <- 'metadata2.xlsx'
panel_dir <- "panel_metadata2.xlsx"
md <- read_excel(metadata_dir)
panel <- read_excel(panel_dir)
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
all(panel$fcs_colname %in% colnames(fs))
md$condition <- factor(md$condition, levels = c("JAK2", "Non_JAK2"))
md$sample_id <- factor(md$sample_id,
levels = md$sample_id[order(md$condition)])
md$patient_id <- factor(md$patient_id)
md$outcome <- factor(md$outcome, levels= c('1','2','3'))
#####Data preparation#####
fcs_dir <- getwd()
fcs_files <- list.files(fcs_dir, pattern = "fcs$")
fs <- read.flowSet(file.path(fcs_dir, fcs_files))
all(panel$fcs_colname %in% colnames(fs))
md$condition <- factor(md$condition, levels = c("JAK2", "Non_JAK2"))
md$sample_id <- factor(md$sample_id,
levels = md$sample_id[order(md$condition)])
md$patient_id <- factor(md$patient_id)
md$outcome <- factor(md$outcome, levels= c('1','2','3'))
sce <- prepData(fs, panel, md, md_cols = list(file='file_name',id='sample_id',factors=c('outcome','condition','patient_id')), features = panel$fcs_colname)
#example for how to perform downsampling, then define the downsampled data as sce_d
sce_d <-downsample(sce,n=2000,seed=1234)
dim(sce_d)
#####BinaryClust#####
#input classification matrix and visualise marker intensity distribution
class_dir <- 'types.csv'
types <- read_csv('types.csv')
displayMarkers(sce,types,color_by='sample_id',n=3)
?read.csv
library(readr)
library(readr)
types <- read_csv('types.csv')
types <- read_csv('types.csv')
types
displayMarkers(sce,types,color_by='sample_id',n=3)
#perform binary classification
exprs <-t(assay(sce, 'exprs'))
binary.results <- binaryClass(exprs, class_dir)
sce$cluster_id <- unlist(binary.results)
#check binary classification results of all cells
plotbcFreq(sce,binary.results)
plotbcHeatmap(sce,binary.results,remove.unclass=F)
library(pheatmap)
plotbcHeatmap(sce,binary.results,remove.unclass=F)
library(RColorBrewer)
plotbcHeatmap(sce,binary.results,remove.unclass=F)
use_package('readr')
use_package('RColorBrewer')
#plot DR colored by binary classification results
sce <- runDR(sce, dr = "UMAP", cells = 2000, features = "type")
plotDR(sce, "UMAP", color_by = "cluster_id",facet_by = 'condition')
sce <- runDR(sce, dr = "TSNE", cells = 2000, features = "type")
plotDR(sce, "TSNE", color_by = "cluster_id",facet_by='condition')
# plot abundance of binary classification results
plotFreq(sce,type='stacked',group_by='condition')
plotFreq(sce,type='box',group_by='outcome')
# plot abundance of binary classification results
plotFreq(sce,type='stacked',group_by='condition')
plotFreq(sce,type='box',group_by='condition')
#load required R packages
library(BinaryClust2)
library(BinaryClust2)
library(CATALYST)
library(readxl)
library(flowCore)
library(SingleCellExperiment)
library(cowplot)
library(ggplot2)
library(reshape2)
library(dplyr)
library(caret)
library(rstatix)
library(Rphenograph)
library(readr)
library(RColorBrewer)
plotDR(sce, "UMAP", color_by = "cluster_id")
plotDR(sce, "UMAP", color_by = "cluster_id")
plotDR(sce, "TSNE", color_by = "cluster_id")
plotDR(sce, "UMAP", color_by = "cluster_id",facet_by='outcome')
plotDR(sce, "TSNE", color_by = "cluster_id",facet_by='outcome')
plotDR(sce, "UMAP", color_by = "cluster_id",facet_by = 'outcome')
plotFreq(sce,type='stacked',group_by='condition')
# get raw data of cell abundances
fq<-freqData(sce,metadata=T)
View(fq)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
#check the behavior of specific marker distribution
displayMarkers(sce,types,color_by='sample_id',ncol =3)
plotStateMarkerExprs
?plotStateMarkerExprs
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
?downsample
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
s_marker<-state_markers(sce)
s_marker
exprs <- as.data.frame(t(assay(sce)))
stat_exprs <- exprs[,s_marker]
stat_exprs <- cbind(stat_exprs, sample_id = sce$sample_id,cluster_id=cluster_ids(sce))
stat_exprs
medexprs<-stat_exprs%>%group_by(cluster_id,sample_id)%>% summarize(across(where(is.numeric), median))
as.data.frame(stat_exprs)
stat_exprs<-as.data.frame(stat_exprs)
medexprs<-stat_exprs%>%group_by(cluster_id,sample_id)%>% summarize(across(where(is.numeric), median))
medexprs
View(medexprs)
exprs <- as.data.frame(t(assay(sce)))
stat_exprs <- exprs[,s_marker]
stat_exprs
stat_exprs <- cbind(stat_exprs, sample_id = sce$sample_id,cluster_id=cluster_ids(sce))
stat_exprs
exprs
stat_exprs
exprs <- as.data.frame(t(assay(sce)))
stat_exprs <- exprs[,s_marker]
stat_exprs
stat_exprs <- exprs[,'CD45']
stat_exprs
colnames(stat_exprs)
stat_exprs <- exprs[,c('CD45','CD4')]
colnames(stat_exprs)
colnames(stat_exprs)
stat_exprs <- exprs[[,s_marker]]
s_marker<-state_markers(sce)
exprs <- as.data.frame(t(assay(sce)))
stat_exprs <- exprs[[,s_marker]]
exprs$CD45
stat_exprs <- exprs[[s_marker]]
stat_exprs
colnames(stat_exprs)
s_marker<-state_markers(sce)
s_marker
select(exprs,s_marker)
stat_exprs <-select(exprs,s_marker)
stat_exprs
colnames(stat_exprs)
stat_exprs <- as.data.frame(exprs[[s_marker]])
stat_exprs
colnames(stat_exprs)
s_marker<-c('CD45','CD4')
stat_exprs <-select(exprs,s_marker)
colnames(stat_exprs)
s_marker<-state_markers(sce)
exprs <- as.data.frame(t(assay(sce)))
stat_exprs <-select(exprs,s_marker)
stat_exprs <- cbind(stat_exprs, sample_id = sce$sample_id,cluster_id=cluster_ids(sce))
stat_exprs
medexprs<-stat_exprs%>%group_by(cluster_id,sample_id)%>% summarize(across(where(is.numeric), median))
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='outcome')
rownames(sce)
rowData(sce)
rowData(sce)[23,]
rowData(sce)[23,3]
rowData(sce)[23,3]<-'state'
rowData(sce)[23,3]
rowData(sce)[14,]
rowData(sce)[14,3]
rowData(sce)[14,3]<-'state'
rowData(sce)[14,3]
rowData(sce)[1,]
rowData(sce)[1,]<-'type'
rowData(sce)[27,]
rowData(sce)[27,]<-'state'
#plot state marker expression
plotStateMarkerExprs(sce,group='condition')
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='outcome')
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='condition')
#state marker comparison(antigen,cluster,statistics)
#vigenette
# for batchExam, downsample
plotStateMarkerExprs(sce,group='outcome')
stat_condition<-statTest(sce,group='condition')
library(tidyr)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
stat_condition<-statTest(sce,group='condition')
stat_condition
#subset CD4 T cell population for in-depth interrogation
CD4_sce<-extractCluster(sce,cluster='T Cells, CD4')
# run clustering algorithm
set.seed(1234)
CD4_rph_sce <-runPheno(CD4_sce,k=20,downsample=F,seed=134,type_markers = T)
dim(CD4_sce)
CD4_rph_sce <-runPheno(CD4_sce,k=20,downsample=F,seed=134,type_markers = T)#rPhenograph
library(Rphenograph)
membership()
??membership
help(package='Rphenograph')
library(igraph)
CD4_rph_sce <-runPheno(CD4_sce,k=20,downsample=F,seed=134,type_markers = T)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
?batchPrep
batchPrep(fcs_dir,metadata_dir,panel_dir,downsample = 1000)
CD4_rph_sce <-runPheno(CD4_sce,k=20,downsample=1000,seed=134,type_markers = T)#rPhenograph
View(CD4_rph_sce)
runPheno(CD4_sce,k=20,downsample=1000,seed=134,type_markers = T)
data <- t(assay(sce,'exprs'))
rph_output <- Rphenograph(data, k = 20)
View(CD4_rph_sce)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
dim(CD4_rph_sce)
cluster_ids(CD4_rph_sce)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
plotClusterHeatmap(CD4_rph_sce,
hm2 = NULL, k = "rph", m = NULL,
cluster_anno = TRUE, draw_freqs = TRUE)
plotClusterHeatmap(CD4_rph_sce,
hm2 = NULL, k = "rph", m = NULL,
cluster_anno = TRUE, draw_freqs = TRUE)
#OR users may choose flowSOM for clustering
CD4_sce<-CATALYST::cluster(CD4_sce, features = type_markers(CD4_sce),
xdim = 10, ydim = 10, maxK = 40, seed = 1234)
medexprs_n_l
?statTest
# get raw data of cell frequencies
fq<-freqData(sce,metadata=T)
#statistical comparison using frequency table
stat_outcome<-statTest(fq,group='outcome',posthoc = T, method = 'pairwise.wilcox.test')
stat_condition<-statTest(fq,group='condition')
View(fq)
statTest(fq,group='condition')
?statTest
#statistical comparison using frequency table
stat_outcome<-statTest(abuntable=fq,group='outcome',posthoc = T, method = 'pairwise.wilcox.test')
stat_condition<-statTest(abuntable=fq,group='condition')
View(stat_condition)
View(fq)
s_marker<-state_markers(sce)
s_marker
exprs <- as.data.frame(t(assay(sce)))
stat_exprs <-select(exprs,s_marker)
stat_exprs <- cbind(stat_exprs, sample_id = sce$sample_id,cluster_id=cluster_ids(sce))
stat_exprs
suppressMessages(medexprs<-stat_exprs%>%group_by(cluster_id,sample_id)%>% summarize(across(where(is.numeric), median)))
medexprs
medexprs<-merge(medexprs,meta,by='sample_id')
meta<-select(as.data.frame(metadata(sce)$experiment_info),-n_cells)
medexprs<-merge(medexprs,meta,by='sample_id')
suppressMessages(medexprs_n_l <- melt(medexprs))
medexprs_n_l
names <- colnames(meta)[!colnames(meta)%in%c('sample_id','patient_id')]
colnames(meta)
names
colnames(meta)[!colnames(meta)%in%c('sample_id','patient_id')]
colnames(meta)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
medexprs_n_l
#merge clusters using CATALYST functions
merging_table1<-read_excel("cluster_merging3.xlsx")
getwd()
#merge clusters using CATALYST functions
merging_table1<-read_excel("cluster_merging3.xlsx")
#merge clusters using CATALYST functions
merging_table1<-read_excel("cluster_merging3.xlsx")
getwd()
merging_table1<-read_excel("cluster_merging3.xlsx")
head(data.frame(merging_table1))
CD4_rph_sce <- mergeClusters(CD4_rph_sce, k = "rph",
table = merging_table1, id = "merging1")
plotClusterHeatmap(CD4_rph_sce, k = "merging1")
plotClusterHeatmap(CD4_rph_sce, k = "merging1")
plotAbundances(CD4_rph_sce, k = "merging1", by = "cluster_id", shape = "patient_id")
plotAbundances(CD4_rph_sce, k = "merging1", by = "cluster_id", shape = "patient_id")
fq_CD4T<-freqData(CD4_rph_sce,metadata=T)
fq_CD4T
#statistical comparison for cell frequencies using sce object
stat_outcome_CD4T<-statTest(CD4_rph_sce,group='outcome',posthoc = T, method = 'pairwise.wilcox.test')
View(stat_outcome_CD4T)
stat_condition_CD4T<-statTest(CD4_rph_sce,group='condition',posthoc = T, method = 'pairwise.wilcox.test')
getwd()
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/test_files")
fcs_dir <- getwd()
metadata_dir <- 'Metadata.xlsx'
panel_dir <- "Panel.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir,downsample=2000)
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
library(BinaryClust2)
library(readxl)
library(CATALYST)
library(SingleCellExperiment)
library(flowCore)
library(cowplot)
library(CytoNorm)
library(CytofRUV)
library(dplyr)
library(writexl)
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/test_files")
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/test_files")
fcs_dir <- getwd()
metadata_dir <- 'Metadata.xlsx'
panel_dir <- "Panel.xlsx"
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir,downsample=1000)
dim(prepsce)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir,downsample=1000)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir,downsample=1000)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir,downsample=1000)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
prepsce<-batchPrep(fcs_dir,metadata_dir,panel_dir)
downsample(prepsce,n=1000)
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
help(package='BinaryClust')
md
getwd()
metadata_dir <- 'Metadata.xlsx'
read_excel(metadata_dir)
setwd("/Users/jingsun/Desktop/PhD project/CyTOF pipeline development/fcs")
metadata_dir <- 'metadata2.xlsx'
read_excel('metadata_dir')
metadata_dir <- 'metadata2.xlsx'
read_excel('metadata_dir')
read_excel("metadata2.xlsx")
read_excel("panel_metadata2.xlsx")
types
getwd()
View(exprs)
nCells(sce)
n_cells(sce)
n_cells(sce)
n_cells(prepsce)
usethis::use_github()
devtools::load_all("~/Desktop/PhD project/CyTOF pipeline development/BInaryClust2")
usethis::use_github()
options(timeout = 400)
dim(sce)
save(sce,'MPN_sce.RData')
getwd()
save(sce,'MPN_sce.RData')
save(sce,file='MPN_sce.RData')
md
panel
save(md,file='md.RData')
state_markers(sce)
panel_dir <- "panel_metadata2.xlsx"
panel <- read_excel(panel_dir)
panel
panel <- read_excel(panel_dir)
save(panel,file='panel.RData')
deprecated()
library(devtools)
use_github_links(
auth_token = deprecated(),
host = deprecated(),
overwrite = FALSE
)
use_github()
library(devtools)
use_github()
use_git()
help(package='BinaryClust')
help(package='CATALYST
')
help(package='CATALYST')
devtools::load_all(".")
library(BinaryClust2)
help(package='BinaryClust2')
library(devtools)
install_github("JingAnyaSun/BinaryClust2")
batchExam()
library(pheatmap)
devtools::load_all(".")
#' @param binary.results list, results from binaryClust function
#' @param type a data frame of user pre-defined classification matrix
#' @param use_marker a character string which users can choose the markers to display in the heatmap, options are 'all' which means
#' all markers,'types' indicates type markers, and 'binary' suggests specific markers used for binary classification.
#' @param remove.unclass logical vector, option to remove unclassified cells from plot, default is F
#' @return a ggplot object
#' @export
#'
#' @examples
#' plotbcHeatmap(sce,binary.results,remove.unclass=F)
plotbcHeatmap<-function (sce,binary.results, type,remove.unclass = FALSE,use_marker='all')
{
#define the function of binary_summary
binary_summary<-function (data = NULL, binary.results = NULL)
{
if (is.null(data)) {
return("Please provide data. Use load_data")
}
if (is.null(binary.results)) {
return("Please provide binary classification results. Use binary_class")
}
frequencies <- data.frame(table(binary.results[, "Cell.Type"]))
colnames(frequencies) <- c("Cell.Type", "Frequency")
frequencies[, "Percentage"] <- frequencies[, "Frequency"] *
100/sum(frequencies[, "Frequency"])
medians <- data.frame(matrix(nrow = dim(frequencies)[1],
ncol = dim(data)[2]))
rownames(medians) <- frequencies[, 1]
colnames(medians) <- colnames(data)
for (i in frequencies[, 1]) {
medians[i, ] <- as.vector(apply(data[binary.results[,
"Cell.Type"] == i, ], 2, median))
}
medians[, "Cell.Type"] <- rownames(medians)
to.return <- merge(medians, frequencies, by = "Cell.Type")
return(to.return)
}
exprs_n <- t(assay(sce, 'exprs'))
binary.summary <- binary_summary(exprs_n, binary.results)
if (is.null(binary.summary)) {
return("Error: Please provide binary classification summary (use binary_summary).")
}
if (remove.unclass == FALSE) {
to.plot <- binary.summary
}
else if (remove.unclass == TRUE) {
to.plot <- binary.summary[binary.summary[, "Cell.Type"] !=
"Unclassified", ]
}
rownames(to.plot) <- to.plot[, "Cell.Type"]
to.plot <- subset(to.plot, select = -c(Cell.Type, Frequency,
Percentage))
to.plot<-as.matrix(to.plot)
if(use_marker=='type'){
to.plot <- to.plot[,type_markers(sce)]
}else if (use_marker == 'binary'){
m <- colnames(type)[colnames(type)!='Cell Type']
to.plot <- to.plot[,m]
}else if (use_marker=='all'){
to.plot <- to.plot
}else{
message('Error: for \'use_marker\'Please choose \'type\',\'all\'or\'binary\'')
}
hm_pal = rev(brewer.pal(11, "RdYlBu"))
medians.heatmap<-pheatmap(to.plot, color = colorRampPalette(hm_pal)(100),
cluster_cols = F,
cluster_rows = T,
border_color="white",
cellwidth = 10,
cellheight = 17)
return(medians.heatmap)
}
devtools::load_all(".")
help(package='BinaryClust2')
?plotbcHeatmap
devtools::load_all(".")
library(BinaryClust2)
plotbcHeatmap()
plotbcHeatmap
library(devtools)
use_package('pheatmap')
devtools::load_all(".")
plotClusterHeatmap(CD4_rph_sce,
hm2 = NULL, k = "rph", m = NULL,
cluster_anno = TRUE, draw_freqs = TRUE)
